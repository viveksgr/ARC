function [w,wt_dist,res] = ARC_run_RSA_for_subject(roiDat,cfg)

% Build behavioural RSM(s)
[val1, val2, maskMat] = ARC_build_behav_RSM(cfg);

% Bin neural RSM
behav_ratings = roiDat.behav.ratings(:,cfg.v_ids(roiDat.si));
behav_ratings = normalize(behav_ratings,'medianiqr');

if cfg.splithalf_
    group_vec = roiDat.group_vec)


behav_ratings_exp = behav_ratings(roiDat.group_vec);



[modelmd_binned,modelmd_binned_mat] = ARC_binAndTransform_numctrl(roiDat.betatrials, behav_ratings_exp, cfg.nBin, cfg.numCtrl);
modelmd_binned_mat = permute(modelmd_binned_mat,[3 1 2]);

[~,modelmd_binned_shuff] = ARC_binAndTransform_shuffcoarse(roiDat.betatrials, behav_ratings_exp, cfg.nBin, cfg.numCtrl,cfg.nShuffle);
modelmd_binned_shuff = permute(modelmd_binned_shuff,[3 1 2]);
if cfg.zscoreRows
    modelmd_binned = zscore(modelmd_binned,[],2);
end
modelmd_corrcoef = corrcoef(modelmd_binned);

% % Fit multiple-regression RSA
% [w,t] = ARC_multicomputeWeights_tsc([val1(maskMat) val2(maskMat)],  modelmd_corrcoef(maskMat));

wt_dist = zeros(cfg.nShuffle,3);
for zz = 1:cfg.nShuffle % shuffle
    modelmd_binneds = squeeze(modelmd_binned_mat(zz,:,:));
    if  cfg.zscoreRows
        modelmd_binneds = zscore(modelmd_binneds,[],2);
    end
    modelmd_corrcoef = corrcoef(modelmd_binneds);  
    [wt_dist(zz,:), ~] = ARC_multicomputeWeights_tsc([val1(maskMat) val2(maskMat)],modelmd_corrcoef(maskMat));
end
w = mean(wt_dist)';

% Shuffle test
wt_dist = zeros(cfg.nShuffle,3);
for zz = 1:cfg.nShuffle % shuffle
    modelmd_binneds = squeeze(modelmd_binned_shuff(zz,:,:));
    if  cfg.zscoreRows
        modelmd_binneds = zscore(modelmd_binneds,[],2);
    end
    modelmd_corrcoef = corrcoef(modelmd_binneds);  
    [wt_dist(zz,:), ~] = ARC_multicomputeWeights_tsc([val1(maskMat) val2(maskMat)],modelmd_corrcoef(maskMat));
end

% Voxelwise analysis
res = ARC_voxwise(val1, val2, modelmd_binned_mat);
end
