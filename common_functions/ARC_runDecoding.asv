function ARC_runDecoding(cfg)
%ARC_runDecoding  Main entry point for the decoding analysis

addpath(cfg.libsvmPath);                              % libsvm, if required
% behav = load(cfg.behavFile);                          % behavioural ratings
trfs = load(cfg.trialFile);     

% containers for results
beta   = zeros(cfg.nbSubjects,cfg.nbROIs,2);
tstat  = beta;
dfmat  = beta;

for sIdx = 1:cfg.nbSubjects
    subj = cfg.subjects(sIdx);
    fprintf('Subject %02d\n',subj);

    % ▸ behavioural vector for this subject
    % beh = behav.behav(subj).ratings(:,cfg.behavVector);
    beh = trfs.behav_ratings_{sIdx};
    if cfg.shuffleBehav, beh = beh(randperm(numel(beh))); end
    beh = normalize(beh,'medianiqr');

    % ▸ per-ROI loop
    for r = 1:cfg.nbROIs
        [neural,posIdx,negIdx,mutIdx,labels] = ...
            ARC_prepareROI(cfg,subj,r,beh);

        % choose voxel population ---------------------------------------
        switch cfg.popChoice
            case 'pos'
                X1 = neural(labels>cfg.binCentre,posIdx);   % V+ coded by positive pop
                X2 = neural(labels<cfg.binCentre,posIdx);   % V- coded by negative pop
                y1 = labels(labels>cfg.binCentre);
                y2 = labels(labels<cfg.binCentre);
            case 'neg'
                X1 = neural(labels>cfg.binCentre,negIdx);   % V+ coded by negative pop
                X2 = neural(labels<cfg.binCentre,negIdx);   % V- coded by positive pop
                y1 = labels(labels>cfg.binCentre);
                y2 = labels(labels<cfg.binCentre);
            case 'mut'                                          % mutually tuned voxels
                X1 = neural(labels>cfg.binCentre,mutIdx);
                X2 = neural(labels<cfg.binCentre,mutIdx);
                y1 = labels(labels>cfg.binCentre);
                y2 = labels(labels<cfg.binCentre);
            otherwise, error('Bad popChoice');
        end

        % ▸ decode two tasks (valence+, valence-) -----------------------
        [r1,~,t1] = ARC_regress_nested2_normed(X1,y1,2,1);
        [r2,~,t2] = ARC_regress_nested2_normed(X2,y2,2,1);

        % store
        beta  (sIdx,r,:) = [r1,r2];
        tstat (sIdx,r,:) = [t1,t2];
        dfmat (sIdx,r,:) = [length(y1),length(y2)];
    end
end

% ▸ group-level statistics & plotting -----------------------------------
% ARC_plotDecoding(beta,tstat,dfmat,cfg);

mkdir(cfg.saveDir);
[pvals] = ARC_decoding_pvals(beta,dfmat);     % your existing helper
ARC_barplot_sig(beta,pvals)
xticks(1:cfg.nbROIs)
xticklabels(cfg.ROIs.names);
savefig(fullfile(cfg.saveDir,"ARC_decoding.fig"))
print(fullfile(cfg.saveDir,'ARC_decoding'),'-dpng')
print(gcf,'-vector','-dsvg',[fullfile(cfg.saveDir,'ARC_decoding'),'.svg']) % svg

save(fullfile(cfg.saveDir,'ARC_decoding.mat'),'beta','tstat','dfmat','cfg');
end
